package conf

import (
	"flag"
	"github.com/BurntSushi/toml"
	"github.com/huangbosbos/go-hutool/cache/memcache"
	"github.com/huangbosbos/go-hutool/cache/redis"
	"github.com/huangbosbos/go-hutool/conf"
	"github.com/huangbosbos/go-hutool/database/orm"
	"github.com/huangbosbos/go-hutool/database/sql"
	"github.com/huangbosbos/go-hutool/log"
	bm "github.com/huangbosbos/go-hutool/net/http/blademaster"
	"github.com/huangbosbos/go-hutool/net/http/blademaster/middleware/permit"
	"github.com/huangbosbos/go-hutool/net/trace"
	xtime "github.com/huangbosbos/go-hutool/time"
	"github.com/pkg/errors"
	"time"
)

const (
	_configKey = "saga-admin.toml"
)

var (
	// config
	confPath string
	client   *conf.Client
	// Conf store the global config
	Conf   = &Config{}
	reload chan bool
)

// Config def.
type Config struct {
	// httpServer
	HTTPServer *bm.ServerConfig
	// httpClinet
	HTTPClient *bm.ClientConfig
	// tracer
	Tracer *trace.Config
	// db
	DB       *DB
	Memcache *Memcache
	Redis    *redis.Config
	Log      *log.Config
	ORM      *orm.Config
	Permit   *permit.Config2
	Property *Property
}

// DB conf.
type DB struct {
	// Creative db
	Creative *sql.Config
	Manager  *sql.Config
	Upcrm    *orm.Config
}

// Redis conf.
type Redis struct {
	Databus *struct {
		*redis.Config
		Expire time.Duration
	}
}

// Memcache config.
type Memcache struct {
	MC             *memcache.Config
	MCRecordExpire xtime.Duration
}

func init() {
	flag.StringVar(&confPath, "conf", "", "config path")
	reload = make(chan bool, 10)
}

// Init init conf.
func Init() (err error) {
	if confPath == "" {
		return configCenter()
	}
	if _, err = toml.DecodeFile(confPath, &Conf); err != nil {
		log.Error("toml.DecodeFile(%s) err(%+v)", confPath, err)
		return
	}
	Conf = parseTeamInfo(Conf)
	return
}

// configCenter .
func configCenter() (err error) {
	if client, err = conf.New(); err != nil {
		panic(err)
	}
	if err = load(); err != nil {
		return
	}
	client.WatchAll()
	go func() {
		for range client.Event() {
			log.Info("config reload")
			if load() != nil {
				log.Error("config reload error (%v)", err)
			} else {
				reload <- true
			}
		}
	}()
	return
}

// load .
func load() (err error) {
	var (
		s       string
		ok      bool
		tmpConf *Config
	)
	if s, ok = client.Value(_configKey); !ok {
		err = errors.Errorf("load config center error [%s]", _configKey)
		return
	}
	if _, err = toml.Decode(s, &tmpConf); err != nil {
		err = errors.Wrapf(err, "could not decode config err(%+v)", err)
		return
	}
	Conf = parseTeamInfo(tmpConf)
	return
}

func parseTeamInfo(c *Config) *Config {
	return c
}

// Property config for biz logic. 业务逻辑的属性配置
type Property struct {
}
