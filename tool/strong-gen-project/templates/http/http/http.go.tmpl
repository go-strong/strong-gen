package http

import (
	"fmt"
	"{{.Name}}/model"
	"net/http"

	"github.com/huangbosbos/go-hutool/log"
	bm "github.com/huangbosbos/go-hutool/net/http/blademaster"
	"{{.Name}}/conf"
	"{{.Name}}/service"
)

var (
	//Svc service.
	srv *service.Service
)

// Init init http sever instance.
func Init(c *conf.Config, s *service.Service) {
	srv = s
	// init inner router
	engine := bm.DefaultServer(conf.Conf.HTTPServer)
	initRouter(engine)
	// init inner server
	if err := engine.Start(); err != nil {
		log.Error("engine.Start error(%v)", err)
		panic(err)
	}
	fmt.Println("curl http://localhost:8000/{{.Name}}/start")
	fmt.Println("curl http://localhost:8000/metadata")
	fmt.Println("curl http://localhost:8000/metrics")
	fmt.Println("curl http://localhost:8000/ping")
	fmt.Println("curl http://localhost:8000/debug/pprof/")
}

// initRouter init outer router api path.
func initRouter(e *bm.Engine) {
	e.Ping(ping)                 // engine自带的"/ping"接口，用于负载均衡检测服务健康状态
	g := e.Group("/go-business") // e.Group 创建一组 "/go-business" 起始的路由组
	{
		g.GET("/start", howToStart)  // g.GET 创建一个 "kratos-demo/start" 的路由，使用GET方式请求，默认处理Handler为howToStart方法
		g.POST("/start", howToStart) // g.POST 创建一个 "kratos-demo/start" 的路由，使用POST方式请求，默认处理Handler为howToStart方法
	}
}


// example for http request handler.
func howToStart(c *bm.Context) { // handler方法默认传入bm的Context对象
	k := &model.Strong{
		Hello: "Welcome to Golang !",
	}
	c.JSON(k, nil)
}

// ping check server ok.
// engine自带Ping方法，用于设置`/ping`路由的handler，
// 该路由统一提供于负载均衡服务做健康检测。服务是否健康，可自定义`ping handler`进行逻辑判断，如检测DB是否正常等。
func ping(c *bm.Context) {
	if err := srv.Ping(c); err != nil {
		log.Error("ping error(%v)", err)
		c.AbortWithStatus(http.StatusServiceUnavailable)
	}
}

//默认路由有：
//
//* /metrics 用于prometheus信息采集
//* /metadata 可以查看所有注册的路由信息

