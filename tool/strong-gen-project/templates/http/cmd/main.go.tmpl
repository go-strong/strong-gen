package main

import (
	"flag"
	"github.com/huangbosbos/go-hutool/syscall"
	"{{.Name}}/conf"
	"{{.Name}}/http"
	"{{.Name}}/service"
	"os"
	"os/signal"
	"time"

	"github.com/huangbosbos/go-hutool/log"
)

const (
	_durationForClosingServer = 2 // second
)

func main() {
	flag.Parse()
	if err := conf.Init(); err != nil {
		log.Error("conf.Init() error(%v)", err)
		panic(err)
	}

	log.Init(conf.Conf.Log)
	defer log.Close()
	log.Info("{{.Name}} start")

	s := service.New()
	http.Init(s)
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		si := <-c
		log.Info("{{.Name}} get a signal %s", si.String())
		switch si {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:
			log.Info("{{.Name}} exit")
			s.Close()
			time.Sleep(_durationForClosingServer * time.Second)
			return
		case syscall.SIGHUP:
		default:
			return
		}
	}
}
