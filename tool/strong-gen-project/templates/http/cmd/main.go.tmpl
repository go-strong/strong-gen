package main

import (
	"flag"
	ecode "github.com/huangbosbos/go-hutool/ecode/tip"
	"github.com/huangbosbos/go-hutool/log"
	//"github.com/huangbosbos/go-hutool/net/trace"
	"github.com/huangbosbos/go-hutool/os/signal"
	"github.com/huangbosbos/go-hutool/syscall"
	"{{.Name}}/conf"
	"{{.Name}}/http"
	"{{.Name}}/service"
	"os"
	"time"
)

const (
	_durationForClosingServer = 2 // second
)

var (
	svc *service.Service
)

// main $ go run main.go -conf saga-admin-test.toml
func main() {
	flag.Parse()
	if err := conf.Init(); err != nil {
		log.Error("conf.Init() error(%v)", err)
		panic(err)
	}

	// log init
	log.Init(conf.Conf.Log)
	defer func() {
		log.Close()
		// wait for a while to guarantee that all log messages are written
		time.Sleep(10 * time.Millisecond)
	}()

	// trace init
	//trace.Init(conf.Conf.Tracer)
	//defer trace.Close()

	// eCode init
	ecode.Init(conf.Conf.Ecode)

	//service init
	svc = service.New(conf.Conf)

	//http init
	http.Init(conf.Conf, svc)

	log.Info("{{.Name}} start")
	signalHandler()
}

// signalHandler
func signalHandler() {
	// init signal
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		si := <-c
		log.Info("{{.Name}} get a signal %s", si.String())
		switch si {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGSTOP, syscall.SIGINT:
			//time.Sleep(time.Second * 2)
			log.Info("get a signal %s, stop the go-business process", si.String())
			svc.Close()
			svc.Wait()
			time.Sleep(_durationForClosingServer * time.Second)
			return
		case syscall.SIGHUP:
		// TODO reload
		default:
			return
		}
	}
}

func init() {
	os.Setenv("HTTP_PERF", "close") //close http perf
	// idea add Program arguments:  -conf ./cmd/saga-admin-test.toml
}
