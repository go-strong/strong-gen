package main

import (
	"flag"
	"github.com/huangbosbos/go-hutool/net/trace"
	"github.com/huangbosbos/go-hutool/syscall"
	"{{.Name}}/conf"
	"{{.Name}}/http"
	"{{.Name}}/service"
	"os"
	"os/signal"
	"time"

	"github.com/huangbosbos/go-hutool/log"
)

const (
	_durationForClosingServer = 2 // second
)

func main() {
	flag.Parse()
	if err := conf.Init(); err != nil {
		log.Error("conf.Init() error(%v)", err)
		panic(err)
	}
	// init log
	log.Init(conf.Conf.Log)
	trace.Init(conf.Conf.Tracer)
	defer trace.Close()
	defer func() {
		log.Close()
		// wait for a while to guarantee that all log messages are written
		time.Sleep(10 * time.Millisecond)
	}()
	//service init
	log.Info("{{.Name}} start")
	svc := service.New()
	http.Init(conf.Conf, svc)
	// init signal
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		s := <-c
		log.Info("{{.Name}} get a signal %s", s.String())
		switch s {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGSTOP, syscall.SIGINT:
			svc.Close()
			log.Info("{{.Name}} exit")
			time.Sleep(_durationForClosingServer * time.Second)
			return
		case syscall.SIGHUP:
		// TODO reload
		default:
			return
		}
	}
}
